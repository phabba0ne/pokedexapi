TODO 3a : (user feedback) show stylish loading animation while loading data
./modules/graphicsManager.js

TODO 3b : (user feedback) deactivate button while loading
./modules/graphicsManager.js

TODO 4a : load information for listView (capitalized name, type(s), img, type-fitting background-colors, ID, ...)
-> ./modules/dataManager.js

TODO 4b : glowing hover effect on each card (type-fitting)
./modules/graphicsManager.js

TODO 5a : open list view on cardListTemplate onclick
./scripts/detail.js

TODO 5b : close detailView onclick next to cart
./scripts/detail.js

TODO 5c : if detailView active, no scrolling possible
./scripts/detail.js

TODO 5d : show stats of pokémon (at least hp, attack, defense)

Best practices:

Keep adding .content wrappers inside sections, and all styles will stay clean and predictable.

Project structure:

/index.html              // Minimal HTML structure with <main> and <header>

/assets/
/icons/
/img/

/modules/
├── dataManager.js       // API communication and data transformation
├── graphicsManager.js   // Animations, loading spinners, visual effects
├── renderManager.js     // Controls what and how to render in UI


/scripts/
├── main.js              // App entry point: event listeners, orchestration
├── detail.js            // Detail view logic (overlay, stats, evolution)
├── fonts.js             // Dynamic font loading
├── render.js            // DOM rendering using templates
├── template.js          // Template functions (return HTML strings)


/templates/
├── template.js          // Templates to create HTML-Elements

/styles/w
├── fonts.css            // Font loading, fallback styling
├── globals.css          // Resets, base layout settings, root variables
├── layout.css           // Flexbox layout, main/sections styling
├── style.css

API endpoints:

https://pokeapi.co/api/v2/
   all data — entry point listing all resource groups (paginated)

https://pokeapi.co/api/v2/pokemon
   list all Pokémon (paginated, default 20 per page; use ?limit=&offset=)

https://pokeapi.co/api/v2/pokemon/{idOrName}
   data for one Pokémon by id or name (stats, types, abilities, sprites)

https://pokeapi.co/api/v2/pokemonSpecies
   list all Pokémon species (paginated), including egg groups, base stats, flavor text

https://pokeapi.co/api/v2/pokemonSpecies/{idOrName}
   species details for specific species (evolution chain link, flavor text, habitat)

https://pokeapi.co/api/v2/evolutionChain/{id}
   evolution chain data for a given chain id (linked species evolution order)

https://pokeapi.co/api/v2/type
   list all types (e.g. grass, fire) including damage relations

https://pokeapi.co/api/v2/type/{idOrName}
   type details (damage relations: double, half, no damage to/from)

https://pokeapi.co/api/v2/ability
   list all abilities (paginated)

https://pokeapi.co/api/v2/ability/{idOrName}
   ability details (effect entries, associated Pokémon)

https://pokeapi.co/api/v2/move
   list all moves (paginated)

https://pokeapi.co/api/v2/move/{idOrName}
   move details (type, power, accuracy, damage class, effects)

https://pokeapi.co/api/v2/item
   list all items (pokéballs, potions, berries etc.)

https://pokeapi.co/api/v2/item/{idOrName}
   item details (effect, cost, attributes)

https://pokeapi.co/api/v2/berry
   list all berries

https://pokeapi.co/api/v2/berry/{idOrName}
   berry details (growthTime, flavors, firmness)

https://pokeapi.co/api/v2/location
   list all game-world locations

https://pokeapi.co/api/v2/location/{idOrName}
   location details (region, encounter areas)

https://pokeapi.co/api/v2/locationArea/{idOrName}
   specific location area (encounter rates per version)

https://pokeapi.co/api/v2/pokedex/{idOrName}
   pokédex entries (regional lists of species with names and entries)

https://pokeapi.co/api/v2/generation/{idOrName}
   generation data (introduced moves, species, abilities)

https://pokeapi.co/api/v2/version
   game version details (generation, region groups)

https://pokeapi.co/api/v2/moveDamageClass/{idOrName}
   damage class info: physical / special / status

https://pokeapi.co/api/v2/moveLearnMethod/{idOrName}
   how Pokémon learn moves (e.g. level-up, egg, tutor)

https://pokeapi.co/api/v2/moveTarget/{idOrName}
   target of a move (self, adjacent, all)

https://pokeapi.co/api/v2/pokemonShape/{idOrName}
   visual shape categories of Pokémon

https://pokeapi.co/api/v2/pokemonHabitat/{idOrName}
   habitat info (e.g. forest, cave)


Best practice for commits:

feat: 	    add login page			                        Neue Funktionalität (e.g. Einfügen einer Anmeldeseite)
				
fix:	      resolve bug with image loading flicker			Fehlerbehebung (Bugfixes)
				
docs:	      update README with new setup instructions		Dokumentation
				
style:	    fix indentation in main.js			            Code-Formatierung (Leerzeichen, Formatierungen)
				
refactor:	  simplify login flow logic			            Code-Änderungen ohne Bugfix oder neue Funktion
				
perf:	      perf: code shortened to under 400 lines			Code Performance oOptimierung
				
test:	      add unit tests for login component			    Tests

API:

https://pokeapi.co/api/v2/            
all data

https://pokeapi.co/api/v2/pokemon      
all pokemon

https://pokeapi.co/api/v2/pokemon/ditto
resource for one pokemon per name

https://pokeapi.co/api/v2/pokemon-species
all species and additional infos

https://pokeapi.co/api/v2/pokemon-species/bulbasaur
species and additional infos on bulbasaur